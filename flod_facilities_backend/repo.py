#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import json

import requests
from flod_common.session.utils import unsign_auth_token

USERS_URL = os.environ.get('USERS_URL', 'http://localhost:4000')
USERS_VERSION = os.environ.get('USERS_VERSION', 'v1')


def is_super_admin(cookies=None):
    if cookies:
        if 'auth_token' in cookies:
            username = unsign_auth_token(cookies['auth_token'])
            super_user_name = os.environ["AUTH_ADMIN_USER_ID"]
            if username == super_user_name:
                return True
    return False


def get_user_id_for_user(cookies=None):
    if cookies:
        if cookies['auth_token']:
            username = unsign_auth_token(cookies['auth_token'])
            super_user_name = os.environ["AUTH_ADMIN_USER_ID"]
            if username != super_user_name:
                return username
    return None


def get_user_by_id(user_id, cookies):
    url = '%s/api/%s/users/%s' % (USERS_URL, USERS_VERSION, user_id)
    response = requests.get(url, cookies=cookies)
    return response


def get_user(cookies):
    if 'auth_token' not in cookies:
        return None
    username = unsign_auth_token(cookies['auth_token'])
    url = '%s/api/%s/users/%s' % (USERS_URL, USERS_VERSION, username)
    r = requests.get(url, cookies=cookies)
    return r.json()


def make_credential_id(facility_id):
    return 'CAN_EDIT_FACILITY' + '_' + str(facility_id)


def add_user_with_edit_credentials_for_facility(user_id, facility_id, cookies):
    """
        Creates credential if it does not exist, and adds credential to given user.
        @param user_id  is short name (e.g. PMM) or autogenerated user key
    """
    credential_id = make_credential_id(facility_id)
    credential_description = u'User can modify facility'
    credential_resource_id = facility_id

    credentials_uri = '%s/api/%s/credentials/%s' % (USERS_URL, USERS_VERSION, credential_id)

    data = {
        'description': credential_description,
        'resource_id': credential_resource_id,
        'user_id': user_id,
        'force_create_credential': True
    }

    response = requests.post(credentials_uri,
                             data=json.dumps(data),
                             headers={'content-type': 'application/json'},
                             cookies=cookies)
    return response


def add_edit_credentials(user_id, facility_id, cookies):
    user_response = get_user_by_id(user_id=user_id,
                                   cookies=cookies)

    if user_response.status_code == 200:
        user_response_json = user_response.json()
        response = add_user_with_edit_credentials_for_facility(user_id=user_response_json['id'],
                                                               facility_id=facility_id,
                                                               cookies=cookies)
        if response.status_code == 200:
            return True

    return False


def has_role(user, name):
    return name in (role['name'] for role in user.get('roles', []))


def is_administrator(user):
    return has_role(user, 'flod_brukere')


def has_edit_credentials(data, facility_id):
    if "credentials" not in data:
        return False

    target_cred = make_credential_id(facility_id)
    for cred in data["credentials"]:
        if cred["id"] == target_cred:
            return True

    return False


def get_facilities_edit_credentials(user_id, cookies):
    response = get_user_by_id(user_id, cookies)
    data = response.json()

    if not is_administrator(data):
        return []

    facilities_credentials = [int(facility_credential['resource_id']) for facility_credential in data['credentials']
                              if facility_credential['id'].startswith('CAN_EDIT_FACILITY')]

    return facilities_credentials


def can_user_edit_facility(user_id, facility_id, cookies):
    response = get_user_by_id(user_id, cookies)
    data = response.json()
    return is_administrator(data) and has_edit_credentials(data, facility_id)


def can_user_create_facility(user_id, cookies):
    response = get_user_by_id(user_id, cookies)
    return is_administrator(response.json())
