# -*- coding: utf-8 -*-
"""Initial conversion from sqlalchemy create all to alembic

Revision ID: 1b2a8e1a4d45
Revises: None
Create Date: 2014-01-20 15:40:30.883533

"""

# revision identifiers, used by Alembic.
revision = '1b2a8e1a4d45'
down_revision = None

from alembic import op
import sqlalchemy as sa


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('organisations',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('uri', sa.String(length=255), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('uri')
    )
    op.create_table('resources',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('uri', sa.String(length=255), nullable=False),
                    sa.Column('auto_approval_allowed', sa.Boolean(), nullable=False),
                    sa.Column('single_booking_allowed', sa.Boolean(), nullable=False),
                    sa.Column('repeating_booking_allowed', sa.Boolean(), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('uri')
    )
    op.create_table('persons',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('uri', sa.String(length=255), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('uri')
    )
    op.create_table('weekly_blocked_times',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('resource_id', sa.Integer(), nullable=False),
                    sa.Column('week_day', sa.Integer(), nullable=False),
                    sa.Column('start_date', sa.Date(), nullable=False),
                    sa.Column('end_date', sa.Date(), nullable=True),
                    sa.Column('start_time', sa.Time(), nullable=False),
                    sa.Column('end_time', sa.Time(), nullable=False),
                    sa.ForeignKeyConstraint(['resource_id'], ['resources.id'], ),
                    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('blocked_time_intervals',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('resource_id', sa.Integer(), nullable=False),
                    sa.Column('start_time', sa.DateTime(), nullable=False),
                    sa.Column('end_time', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['resource_id'], ['resources.id'], ),
                    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('applications',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('person_id', sa.Integer(), nullable=False),
                    sa.Column('organisation_id', sa.Integer(), nullable=True),
                    sa.Column('resource_id', sa.Integer(), nullable=False),
                    sa.Column('text', sa.String(), nullable=False),
                    sa.Column('status',
                              sa.Enum('Pending', 'Processing', 'Granted', 'Denied', name='application_status_types'),
                              nullable=True),
                    sa.Column('application_time', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['organisation_id'], ['organisations.id'], ),
                    sa.ForeignKeyConstraint(['person_id'], ['persons.id'], ),
                    sa.ForeignKeyConstraint(['resource_id'], ['resources.id'], ),
                    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('repeating_slot_requests',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('resource_id', sa.Integer(), nullable=True),
                    sa.Column('week_day', sa.Integer(), nullable=False),
                    sa.Column('start_date', sa.Date(), nullable=False),
                    sa.Column('end_date', sa.Date(), nullable=False),
                    sa.Column('start_time', sa.Time(), nullable=False),
                    sa.Column('end_time', sa.Time(), nullable=False),
                    sa.Column('application_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['application_id'], ['applications.id'], ),
                    sa.ForeignKeyConstraint(['resource_id'], ['resources.id'], ),
                    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('repeating_slots',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('resource_id', sa.Integer(), nullable=True),
                    sa.Column('week_day', sa.Integer(), nullable=False),
                    sa.Column('start_date', sa.Date(), nullable=False),
                    sa.Column('end_date', sa.Date(), nullable=False),
                    sa.Column('start_time', sa.Time(), nullable=False),
                    sa.Column('end_time', sa.Time(), nullable=False),
                    sa.Column('application', sa.Integer(), nullable=True),
                    sa.Column('status', sa.Enum('Pending', 'Tentative', 'Granted', 'Denied', name='slot_status_types'),
                              nullable=True),
                    sa.Column('request_uri', sa.String(length=100), nullable=False),
                    sa.ForeignKeyConstraint(['application'], ['applications.id'], ),
                    sa.ForeignKeyConstraint(['resource_id'], ['resources.id'], ),
                    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('slots',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('start_time', sa.DateTime(), nullable=False),
                    sa.Column('end_time', sa.DateTime(), nullable=False),
                    sa.Column('resource_id', sa.Integer(), nullable=False),
                    sa.Column('person_id', sa.Integer(), nullable=False),
                    sa.Column('organisation_id', sa.Integer(), nullable=True),
                    sa.Column('status', sa.Enum('Pending', 'Tentative', 'Granted', 'Denied', name='slot_status_types'),
                              nullable=True),
                    sa.Column('application', sa.Integer(), nullable=True),
                    sa.Column('request_uri', sa.String(length=100), nullable=False),
                    sa.ForeignKeyConstraint(['application'], ['applications.id'], ),
                    sa.ForeignKeyConstraint(['organisation_id'], ['organisations.id'], ),
                    sa.ForeignKeyConstraint(['person_id'], ['persons.id'], ),
                    sa.ForeignKeyConstraint(['resource_id'], ['resources.id'], ),
                    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('slot_requests',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('start_time', sa.DateTime(), nullable=False),
                    sa.Column('end_time', sa.DateTime(), nullable=False),
                    sa.Column('resource_id', sa.Integer(), nullable=False),
                    sa.Column('application_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['application_id'], ['applications.id'], ),
                    sa.ForeignKeyConstraint(['resource_id'], ['resources.id'], ),
                    sa.PrimaryKeyConstraint('id')
    )
    ### end Alembic commands ###


def downgrade():
    raise NotImplementedError('This application does not support downgrades.')