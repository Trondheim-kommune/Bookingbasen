# -*- coding: utf-8 -*-
from functools import wraps
from flask import current_app

from domain.models import BookingDomainException
from werkzeug.exceptions import HTTPException


class ApiException(Exception):
    def __init__(self, message, status_code):
        self.message = message
        self.status_code = status_code

    def __str__(self):
        return "Message: %s  Status code: %d" % (self.message, self.status_code)


def make_error_dict(error_message):
    """
    Wraps a string in error_message dict. if the parameter is something else it is left untouched.

    :param error_message:
    :return: a dict with the error_message as string, or the input parameter if not string/unicode
    """

    if isinstance(error_message, basestring):
        return {"__error__": [error_message]}
    else:
        return error_message


def format_exception(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except ApiException as exception:
            return make_error_dict(exception.message), exception.status_code
        except BookingDomainException as exception:
            return make_error_dict(exception.message), 400
        except HTTPException as exception:
            # All exceptions generated by Flask (eg abort(...))
            current_app.logger.error("HTTP Error. %s: %s" % (exception.code, exception.name))
            raise exception
        except Exception as exception:
            # To handle unhandled errors
            # Note: We want to handle unexpected errors and log it for debugging
            current_app.logger.exception(exception)
            return make_error_dict("En feil oppstod: " + exception.message), 400

    return wrapper
