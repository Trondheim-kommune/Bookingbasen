var Flod = window.Flod || {};(function (ns, undefined) {    "use strict";    ns.SearchResults = Backbone.Collection.extend({        staticParams: {},        dynamicParams: {},        assignSelectedObject : null, // Object (view or model to be updated with selected model        hasStaticParameters: function () {            return (this.staticParams && Object.keys(this.staticParams).length > 0);        },        hasDynamicParameters: function () {            return (this.dynamicParams && Object.keys(this.dynamicParams).length > 0);        },        createStaticParamsArray: function () {            var staticParams = [];            if (this.hasStaticParameters()) {                for (var paramKey in this.staticParams) {                    if (this.staticParams.hasOwnProperty(paramKey)) {                        staticParams.push(encodeURIComponent(paramKey)                            + "=" + encodeURIComponent(this.staticParams[paramKey]))                    }                }            }            return staticParams;        },        createDynamicParamsArray: function () {            var dynamicParams = [];            if (this.hasDynamicParameters()) {                for (var paramKey in this.dynamicParams) {                    if (this.dynamicParams.hasOwnProperty(paramKey)) {                        if (!("" === $(this.dynamicParams[paramKey]).val())) {                            dynamicParams.push(encodeURIComponent(paramKey)                                + "=" + encodeURIComponent($(this.dynamicParams[paramKey]).val()))                        }                    }                }            }            return dynamicParams;        },        createParamsListForUrl: function () {            var staticParams = this.createStaticParamsArray();            var dynamicParams = this.createDynamicParamsArray();            var params = staticParams.concat(dynamicParams);            return params.join("&");        },        url: function () {            var url = this.baseUrl;            if (this.hasStaticParameters() || this.hasDynamicParameters()) {                url = url + "?" + this.createParamsListForUrl();            }            return url;        }    });    ns.ResultView = Backbone.View.extend({        tagName: "li",        selected: false,        initialize: function () {            _.bindAll(this, 'select', 'deselect');        },        select: function () {            this.selected = true;            return this;        },        deselect: function () {            if (this.selected == true) {                this.selected = false;            }            return this;        },        render: function () {            var html = _.template(this.template, this.model.toJSON());            this.$el.html(html);            if (this.selected == true) {                this.$el.find("a").focus();                this.$el.find("a").hover();            }            return this;        }    });    ns.ResultsView = Backbone.View.extend({        events: {            "mouseover": "mouseoverInResultsView",            "mouseup": "updateInputFieldAndHide",            "keyup": "keyupInResultsView"        },        typeAheadInputField: undefined,        assignSelectedObject : null,        initialize: function () {            _.bindAll(this, 'getSelected', 'selectFirst', 'selectPrevious', 'selectNext');            if(this.options && this.options.assignSelectedObject) {                this.assignSelectedObject = this.options.assignSelectedObject;            }            this.collection.on("reset", this.render, this);        },        mouseoverInResultsView: function (e) {            this.deselectAll();            var name = e.target.getAttribute('data-id');            this.select(name);        },        updateInputFieldAndHide: function () {            if(this.assignSelectedObject) {                this.assignSelectedObject.model = this.getSelected().model;            }            this.typeAheadInputField.val(this.getSelected().model.toJSON().private_id);            this.hide();        },        hide: function () {            this.$el.hide();            this.typeAheadInputField.focus();        },        keyupInResultsView: function (e) {            if (e.keyCode == 38) { // Up arrow                this.selectPrevious();            } else if (e.keyCode == 40) { // Down arrow                this.selectNext();            } else if (e.keyCode == 13) { // enter                this.updateInputFieldAndHide();            } else if (e.keyCode == 37 || e.keyCode == 39 || e.keyCode == 27) { // Left arrow, right arrow or escape                this.hide();            }        },        select: function (name) {            for (var i = 0; i < this.collectionView.length; i++) {                var result = this.collectionView[i];                if (result.model.toJSON().private_id === name) {                    result.select();                    result.render();                    return result;                }            }            return null;        },        getIndexOfSelected: function () {            for (var i = 0; i < this.collectionView.length; i++) {                var result = this.collectionView[i];                if (result.selected) {                    return i;                }            }            return null;        },        getSelected: function () {            for (var i = 0; i < this.collectionView.length; i++) {                var result = this.collectionView[i];                if (result.selected == true) {                    return result;                }            }            return null;        },        deselectAll: function () {            for (var i = 0; i < this.collectionView.length; i++) {                this.collectionView[i].deselect();                this.collectionView[i].render();            }        },        selectFirst: function () {            if (this.collectionView.length > 0) {                var newIndex = 0;                this.deselectAll();                this.collectionView[newIndex].select();                this.collectionView[newIndex].render();            }            return this.getSelected();        },        selectLast: function () {            if (this.collectionView.length > 0) {                var newIndex = this.collection.length - 1;                this.deselectAll();                this.collectionView[newIndex].select();                this.collectionView[newIndex].render();            }            return this.getSelected();        },        selectPrevious: function () {            var index = this.getIndexOfSelected();            var size = this.collectionView.length;            if (index != null) {                var newIndex = (index + size - 1) % size;                this.collectionView[index].deselect();                this.collectionView[newIndex].select();                this.collectionView[newIndex].render();            }            return this.getSelected();        },        selectNext: function () {            var index = this.getIndexOfSelected();            var size = this.collectionView.length;            if (index != null) {                var newIndex = (index + 1) % size;                this.collectionView[index].deselect();                this.collectionView[newIndex].select();                this.collectionView[newIndex].render();            }            return this.getSelected();        },        render: function () {            if (this.collection.length === 0) {                this.$el.hide();            } else {                this.$el.empty();                this.$el.show();                this.collectionView = this.collection.map(function (result) {                    var resultView = new Flod.ResultView({"model": result});                    resultView.template = this.resultTemplate;                    return  resultView;                }, this);                for (var i = 0; i < this.collectionView.length; i++) {                    this.$el.append(this.collectionView[i].render().$el);                }            }            return this;        }    });    ns.QuickSearch = Backbone.View.extend({        events: {            "keyup .typeahead": "keyupInTypeahead"        },        initialize: function (options) {            _.bindAll(this, 'keyupInTypeahead', 'search', 'selectFirstAndRender', 'selectLastAndRender', 'render');            this.results = new Flod.SearchResults();            this.results.baseUrl = options.baseUrl;            this.results.staticParams = options.staticParams;            this.results.dynamicParams = options.dynamicParams;            this.resultsView = new Flod.ResultsView({"collection": this.results});            if(this.options.assignSelectedObject) {                this.resultsView.assignSelectedObject = this.options.assignSelectedObject;            }            this.resultsView.typeAheadInputField = options.typeAheadInputField;            this.resultsView.resultTemplate = options.resultTemplate;            this.dropdownMenu = options.dropdownMenu;        },        selectFirstAndRender: function () {            this.resultsView.selectFirst();            return this.render();        },        selectLastAndRender: function () {            this.resultsView.selectLast();            return this.render();        },        render: function () {            this.resultsView.setElement(this.dropdownMenu);            return this;        },        keyupInTypeahead: function (e) {            if (e.keyCode == 38) {// Up arrow                this.resultsView.hide();                this.search(this.selectLastAndRender);            } else if (e.keyCode == 40) {// Down arrow                this.resultsView.hide();                this.search(this.selectFirstAndRender);            } else if (e.keyCode == 27) {// escape                this.resultsView.hide();            } else {                this.resultsView.hide();                this.search(this.render);            }        },        search: function (callback) {            this.results.fetch({reset: true, success: callback});        }    });}(Flod));